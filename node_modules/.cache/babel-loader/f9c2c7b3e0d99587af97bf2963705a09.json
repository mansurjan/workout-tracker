{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeSubscription from './RealtimeSubscription';\n\nconst noop = () => {};\n\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.longpollerTimeout The maximum timeout of a long poll AJAX request. Defaults to 20s (double the server long poll timer).\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = w3cwebsocket;\n    this.heartbeatIntervalMs = 30000;\n    this.longpollerTimeout = 20000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    if (options === null || options === void 0 ? void 0 : options.longpollerTimeout) this.longpollerTimeout = options.longpollerTimeout;\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n      yield this.disconnect();\n      this.connect();\n    }), this.reconnectAfterMs);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n\n\n  connect() {\n    if (this.conn) {\n      return;\n    }\n\n    this.conn = new this.transport(this.endPointURL(), [], null, this.headers);\n\n    if (this.conn) {\n      // this.conn.timeout = this.longpollerTimeout // TYPE ERROR\n      this.conn.binaryType = 'arraybuffer';\n\n      this.conn.onopen = () => this._onConnOpen();\n\n      this.conn.onerror = error => this._onConnError(error);\n\n      this.conn.onmessage = event => this.onConnMessage(event);\n\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n\n\n  disconnect(code, reason) {\n    return new Promise((resolve, _reject) => {\n      try {\n        if (this.conn) {\n          this.conn.onclose = function () {}; // noop\n\n\n          if (code) {\n            this.conn.close(code, reason || '');\n          } else {\n            this.conn.close();\n          }\n\n          this.conn = null; // remove open handles\n\n          this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n          this.reconnectTimer.reset();\n        }\n\n        resolve({\n          error: null,\n          data: true\n        });\n      } catch (error) {\n        resolve({\n          error: error,\n          data: false\n        });\n      }\n    });\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overriden.\n   */\n\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Registers a callback for connection state change event.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket opened.\"))\n   */\n\n\n  onOpen(callback) {\n    this.stateChangeCallbacks.open.push(callback);\n  }\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket closed.\"))\n   */\n\n\n  onClose(callback) {\n    this.stateChangeCallbacks.close.push(callback);\n  }\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen((error) => console.log(\"An error occurred\"))\n   */\n\n\n  onError(callback) {\n    this.stateChangeCallbacks.error.push(callback);\n  }\n  /**\n   * Calls a function any time a message is received.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onMessage((message) => console.log(message))\n   */\n\n\n  onMessage(callback) {\n    this.stateChangeCallbacks.message.push(callback);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Retuns `true` is the connection is open.\n   */\n\n\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   */\n\n\n  remove(channel) {\n    this.channels = this.channels.filter(c => c.joinRef() !== channel.joinRef());\n  }\n\n  channel(topic, chanParams = {}) {\n    const chan = new RealtimeSubscription(topic, chanParams, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n\n\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n\n    let callback = () => {\n      this.encode(data, result => {\n        var _a;\n\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n\n  onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel.isMember(topic)).forEach(channel => channel.trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /**\n   * Returns the URL of the websocket.\n   */\n\n\n  endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   */\n\n\n  makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n\n\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        user_token: token\n      });\n\n      if (channel.joinedOnce && channel.isJoined()) {\n        channel.push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   */\n\n\n  leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c.isJoined() || c.isJoining()));\n\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n\n  _onConnOpen() {\n    this.log('transport', `connected to ${this.endPointURL()}`);\n\n    this._flushSendBuffer();\n\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n\n    this._triggerChanError();\n\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n\n  _onConnError(error) {\n    this.log('transport', error.message);\n\n    this._triggerChanError();\n\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n\n  _triggerChanError() {\n    this.channels.forEach(channel => channel.trigger(CHANNEL_EVENTS.error));\n  }\n\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n\n  _sendHeartbeat() {\n    var _a;\n\n    if (!this.isConnected()) {\n      return;\n    }\n\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n\n    this.pendingHeartbeatRef = this.makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["w3cwebsocket","VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeSubscription","noop","RealtimeClient","constructor","endPoint","options","undefined","open","close","error","message","websocket","params","headers","Object","timeout","logger","transport","heartbeatIntervalMs","longpollerTimeout","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","__awaiter","disconnect","connect","conn","endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","onConnMessage","onclose","_onConnClose","code","reason","Promise","resolve","_reject","heartbeatTimer","clearInterval","reset","data","log","kind","msg","onOpen","stateChangeCallbacks","push","onClose","onError","onMessage","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","remove","channel","channels","filter","c","joinRef","topic","chanParams","chan","ref","result","_a","send","sendBuffer","rawMessage","pendingHeartbeatRef","type","status","isMember","forEach","trigger","_appendParams","assign","vsn","makeRef","newRef","toString","setAuth","token","accessToken","updateJoinPayload","user_token","joinedOnce","isJoined","access_token","leaveOpenTopic","dupChannel","find","isJoining","unsubscribe","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","length","prefix","match","query","URLSearchParams"],"sourceRoot":"","sources":["../../src/RealtimeClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}