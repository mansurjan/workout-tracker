{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from \"vue\";\nimport { supabase } from \"../supabase/supabase\";\nimport { useRoute } from \"vue-router\";\nimport { store } from \"../store/index\";\nexport default {\n  name: \"view-workout\",\n\n  setup() {\n    // Create data / vars\n    const data = ref(null);\n    const dataLoaded = ref(null);\n    const statusMessage = ref(null);\n    const errorMessage = ref(null);\n    const route = useRoute();\n    const currentId = route.params.workoutId;\n    const user = computed(() => store.state.user); // Get current Id of route\n    // Get workout data\n\n    const getData = async () => {\n      try {\n        const {\n          data: workouts,\n          error\n        } = await supabase.from(\"workouts\").select(\"*\").eq(\"id\", currentId);\n        if (error) throw error;\n        data.value = workouts[0];\n        dataLoaded.value = true;\n        console.log(data.value);\n      } catch (error) {\n        errorMsg.value = error.message;\n        setTimeout(() => {\n          errorMsg.value = false;\n        }, 5000);\n      }\n    };\n\n    getData(); // Delete workout\n\n    const deleteWorkout = async () => {\n      try {\n        const {\n          error\n        } = await supabase.from(\"workouts\").delete().eq(\"id\", currentId);\n        if (error) throw error;\n        router.push({\n          name: \"Home\"\n        });\n      } catch (error) {\n        errorMsg.value = `Error: ${error.message}`;\n        setTimeout(() => {\n          errorMsg.value = false;\n        }, 5000);\n      }\n    }; // Edit mode\n\n\n    const edit = ref(null);\n\n    const editMode = () => {\n      edit.value = !edit.value;\n    }; // Add exercise\n    // Delete exercise\n    // Update Workout\n\n\n    return {\n      data,\n      dataLoaded,\n      statusMessage,\n      errorMessage,\n      edit,\n      user\n    };\n  }\n\n};","map":{"version":3,"mappings":";AAuOA,SAASA,GAAT,QAAoB,KAApB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,cADO;;EAEbC,KAAK,GAAG;IACN;IACA,MAAMC,IAAG,GAAIN,GAAG,CAAC,IAAD,CAAhB;IACA,MAAMO,UAAS,GAAIP,GAAG,CAAC,IAAD,CAAtB;IACA,MAAMQ,aAAY,GAAIR,GAAG,CAAC,IAAD,CAAzB;IACA,MAAMS,YAAW,GAAIT,GAAG,CAAC,IAAD,CAAxB;IACA,MAAMU,KAAI,GAAIR,QAAQ,EAAtB;IACA,MAAMS,SAAQ,GAAID,KAAK,CAACE,MAAN,CAAaC,SAA/B;IACA,MAAMC,IAAG,GAAIC,QAAQ,CAAC,MAAMZ,KAAK,CAACa,KAAN,CAAYF,IAAnB,CAArB,CARM,CASN;IAEA;;IACA,MAAMG,OAAM,GAAI,YAAY;MAC1B,IAAI;QACF,MAAM;UAAEX,IAAI,EAAEY,QAAR;UAAkBC;QAAlB,IAA4B,MAAMlB,QAAO,CAC5CmB,IADqC,CAChC,UADgC,EAErCC,MAFqC,CAE9B,GAF8B,EAGrCC,EAHqC,CAGlC,IAHkC,EAG5BX,SAH4B,CAAxC;QAIA,IAAIQ,KAAJ,EAAW,MAAMA,KAAN;QACXb,IAAI,CAACiB,KAAL,GAAaL,QAAQ,CAAC,CAAD,CAArB;QACAX,UAAU,CAACgB,KAAX,GAAmB,IAAnB;QACAC,OAAO,CAACC,GAAR,CAAYnB,IAAI,CAACiB,KAAjB;MACF,CATA,CASE,OAAOJ,KAAP,EAAc;QACdO,QAAQ,CAACH,KAAT,GAAiBJ,KAAK,CAACQ,OAAvB;QACAC,UAAU,CAAC,MAAM;UACfF,QAAQ,CAACH,KAAT,GAAiB,KAAjB;QACD,CAFS,EAEP,IAFO,CAAV;MAGF;IACD,CAhBD;;IAiBAN,OAAO,GA7BD,CA8BN;;IACA,MAAMY,aAAY,GAAI,YAAY;MAChC,IAAI;QACF,MAAM;UAAEV;QAAF,IAAY,MAAMlB,QAAO,CAC5BmB,IADqB,CAChB,UADgB,EAErBU,MAFqB,GAGrBR,EAHqB,CAGlB,IAHkB,EAGZX,SAHY,CAAxB;QAIA,IAAIQ,KAAJ,EAAW,MAAMA,KAAN;QACXY,MAAM,CAACC,IAAP,CAAY;UAAE5B,IAAI,EAAE;QAAR,CAAZ;MACF,CAPA,CAOE,OAAOe,KAAP,EAAc;QACdO,QAAQ,CAACH,KAAT,GAAkB,UAASJ,KAAK,CAACQ,OAAQ,EAAzC;QACAC,UAAU,CAAC,MAAM;UACfF,QAAQ,CAACH,KAAT,GAAiB,KAAjB;QACD,CAFS,EAEP,IAFO,CAAV;MAGF;IACD,CAdD,CA/BM,CA8CN;;;IACA,MAAMU,IAAG,GAAIjC,GAAG,CAAC,IAAD,CAAhB;;IACA,MAAMkC,QAAO,GAAI,MAAM;MACrBD,IAAI,CAACV,KAAL,GAAa,CAACU,IAAI,CAACV,KAAnB;IACD,CAFD,CAhDM,CAmDN;IAEA;IAEA;;;IAEA,OAAO;MAAEjB,IAAF;MAAQC,UAAR;MAAoBC,aAApB;MAAmCC,YAAnC;MAAiDwB,IAAjD;MAAuDnB;IAAvD,CAAP;EACD;;AA5DY,CAAf","names":["ref","supabase","useRoute","store","name","setup","data","dataLoaded","statusMessage","errorMessage","route","currentId","params","workoutId","user","computed","state","getData","workouts","error","from","select","eq","value","console","log","errorMsg","message","setTimeout","deleteWorkout","delete","router","push","edit","editMode"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\Desktop\\Projet\\Vue\\workout-tracker\\src\\views\\ViewWorkout.vue"],"sourcesContent":["<template>\n  <div class=\"max-w-screen-sm mx-auto px-4 py-10\">\n    <!-- App Msg -->\n    <div\n      v-if=\"statusMsg || errorMsg\"\n      class=\"mb-10 p-4 rounded-md shadow-md bg-light-grey\">\n      <p class=\"text-at-light-green\">\n        {{ statusMsg }}\n      </p>\n      <p class=\"text-red-500\">\n        {{ errorMsg }}\n      </p>\n    </div>\n\n    <div v-if=\"dataLoaded\">\n      <!-- General Workout Info -->\n      <div\n        class=\"flex flex-col items-center p-8 rounded-md shadow-md bg-light-grey relative\">\n        <div v-if=\"user\" class=\"flex absolute left-2 top-2 gap-x-2\">\n          <div\n            class=\"h-7 w-7 rounded-full flex justify-center items-center cursor-pointer bg-at-light-green shadow-lg\"\n            @click=\"editMode\">\n            <img\n              class=\"h-3.5 w-auto\"\n              src=\"@/assets/images/pencil-light.png\"\n              alt=\"\" />\n          </div>\n          <div\n            @click=\"deleteWorkout\"\n            class=\"h-7 w-7 rounded-full flex justify-center items-center cursor-pointer bg-at-light-green shadow-lg\">\n            <img\n              class=\"h-3.5 w-auto\"\n              src=\"@/assets/images/trash-light.png\"\n              alt=\"\" />\n          </div>\n        </div>\n\n        <img\n          v-if=\"data.workoutType === 'cardio'\"\n          class=\"h-24 w-auto\"\n          src=\"@/assets/images/running-light-green.png\"\n          alt=\"\" />\n\n        <img\n          v-else\n          class=\"h-24 w-auto\"\n          src=\"@/assets/images/dumbbell-light-green.png\"\n          alt=\"\" />\n\n        <span\n          class=\"mt-6 py-1.5 px-5 text-xs text-white bg-at-light-green rounded-lg shadow-md\">\n          {{ data.workoutType }}\n        </span>\n\n        <div class=\"w-full mt-6\">\n          <input\n            v-if=\"edit\"\n            type=\"text\"\n            class=\"p-2 w-full text-gray-500 focus:outline-none\"\n            v-model=\"data.workoutName\" />\n          <h1 v-else class=\"text-at-light-green text-2xl text-center\">\n            {{ data.workoutName }}\n          </h1>\n        </div>\n      </div>\n\n      <!-- Exercises -->\n      <div\n        class=\"mt-10 p-8 rounded-md flex flex-col item-center bg-light-grey shadow-md\">\n        <!-- Strength Training -->\n        <div\n          v-if=\"data.workoutType === 'strength'\"\n          class=\"flex flex-col gap-y-4 w-full\">\n          <div\n            class=\"flex flex-col gap-x-6 gap-y-2 relative sm:flex-row\"\n            v-for=\"(item, index) in data.exercises\"\n            :key=\"index\">\n            <div class=\"flex flex-2 flex-col md:w-1/3\">\n              <label\n                for=\"exercise-name\"\n                class=\"mb-1 text-sm text-at-light-green\">\n                Exercise\n              </label>\n              <input\n                id=\"exercise-name\"\n                v-if=\"edit\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.exercise\" />\n              <p v-else>{{ item.exercise }}</p>\n            </div>\n            <div class=\"flex flex-1 flex-col\">\n              <label for=\"sets\" class=\"mb-1 text-sm text-at-light-green\">\n                Sets\n              </label>\n              <input\n                v-if=\"edit\"\n                id=\"sets\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.sets\" />\n              <p v-else>{{ item.sets }}</p>\n            </div>\n            <div class=\"flex flex-1 flex-col\">\n              <label for=\"reps\" class=\"mb-1 text-sm text-at-light-green\">\n                Reps\n              </label>\n              <input\n                v-if=\"edit\"\n                id=\"reps\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.reps\" />\n              <p v-else>{{ item.reps }}</p>\n            </div>\n            <div class=\"flex flex-1 flex-col\">\n              <label for=\"weight\" class=\"mb-1 text-sm text-at-light-green\">\n                Weight (LB's)\n              </label>\n              <input\n                v-if=\"edit\"\n                id=\"weight\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.weight\" />\n              <p v-else>{{ item.weight }}</p>\n            </div>\n            <img\n              v-if=\"edit\"\n              @click=\"deleteExercise(item.id)\"\n              class=\"absolute h-4 w-auto -left-5 cursor-pointer\"\n              src=\"@/assets/images/trash-light-green.png\"\n              alt=\"\" />\n          </div>\n          <button\n            v-if=\"edit\"\n            @click=\"addExercise\"\n            type=\"button\"\n            class=\"py-2 px-6 rounded-sm self-start text-sm text-white bg-at-light-green duration-200 border-solid border-2 border-transparent hover:border-at-light-green hover:bg-white hover:text-at-light-green\">\n            Add Exercise\n          </button>\n        </div>\n\n        <!-- Cardio -->\n        <div v-else class=\"flex flex-col gap-y-4 w-full\">\n          <div\n            class=\"flex flex-col gap-x-6 gap-y-2 relative sm:flex-row\"\n            v-for=\"(item, index) in data.exercises\"\n            :key=\"index\">\n            <div class=\"flex flex-2 flex-col md:w-1/3\">\n              <label for=\"cardioType\" class=\"mb-1 text-sm text-at-light-green\">\n                Type\n              </label>\n              <select\n                id=\"cardioType\"\n                v-if=\"edit\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.cardioType\">\n                <option value=\"#\">Select Type</option>\n                <option value=\"run\">Runs</option>\n                <option value=\"walk\">Walk</option>\n              </select>\n              <p v-else>{{ item.cardioType }}</p>\n            </div>\n            <div class=\"flex flex-1 flex-col\">\n              <label for=\"distance\" class=\"mb-1 text-sm text-at-light-green\">\n                Distance\n              </label>\n              <input\n                v-if=\"edit\"\n                id=\"distance\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.distance\" />\n              <p v-else>{{ item.distance }}</p>\n            </div>\n            <div class=\"flex flex-1 flex-col\">\n              <label for=\"duration\" class=\"mb-1 text-sm text-at-light-green\">\n                Duration\n              </label>\n              <input\n                v-if=\"edit\"\n                id=\"duration\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.duration\" />\n              <p v-else>{{ item.duration }}</p>\n            </div>\n            <div class=\"flex flex-1 flex-col\">\n              <label for=\"pace\" class=\"mb-1 text-sm text-at-light-green\">\n                Pace\n              </label>\n              <input\n                v-if=\"edit\"\n                id=\"pace\"\n                class=\"p-2 w-full text-gray-500 focus:outline-none\"\n                type=\"text\"\n                v-model=\"item.pace\" />\n              <p v-else>{{ item.pace }}</p>\n            </div>\n            <img\n              @click=\"deleteExercise(item.id)\"\n              v-if=\"edit\"\n              class=\"absolute h-4 w-auto -left-5 cursor-pointer\"\n              src=\"@/assets/images/trash-light-green.png\"\n              alt=\"\" />\n          </div>\n          <button\n            @click=\"addExercise\"\n            v-if=\"edit\"\n            type=\"button\"\n            class=\"py-2 px-6 rounded-sm self-start text-sm text-white bg-at-light-green duration-200 border-solid border-2 border-transparent hover:border-at-light-green hover:bg-white hover:text-at-light-green\">\n            Add Exercise\n          </button>\n        </div>\n      </div>\n\n      <!-- Update -->\n      <button\n        v-if=\"edit\"\n        @click=\"update\"\n        type=\"button\"\n        class=\"mt-10 py-2 px-6 rounded-sm self-start text-sm text-white bg-at-light-green duration-200 border-solid border-2 border-transparent hover:border-at-light-green hover:bg-white hover:text-at-light-green\">\n        Update Workout\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport { supabase } from \"../supabase/supabase\";\nimport { useRoute } from \"vue-router\";\nimport { store } from \"../store/index\";\n\nexport default {\n  name: \"view-workout\",\n  setup() {\n    // Create data / vars\n    const data = ref(null);\n    const dataLoaded = ref(null);\n    const statusMessage = ref(null);\n    const errorMessage = ref(null);\n    const route = useRoute();\n    const currentId = route.params.workoutId;\n    const user = computed(() => store.state.user);\n    // Get current Id of route\n\n    // Get workout data\n    const getData = async () => {\n      try {\n        const { data: workouts, error } = await supabase\n          .from(\"workouts\")\n          .select(\"*\")\n          .eq(\"id\", currentId);\n        if (error) throw error;\n        data.value = workouts[0];\n        dataLoaded.value = true;\n        console.log(data.value);\n      } catch (error) {\n        errorMsg.value = error.message;\n        setTimeout(() => {\n          errorMsg.value = false;\n        }, 5000);\n      }\n    };\n    getData();\n    // Delete workout\n    const deleteWorkout = async () => {\n      try {\n        const { error } = await supabase\n          .from(\"workouts\")\n          .delete()\n          .eq(\"id\", currentId);\n        if (error) throw error;\n        router.push({ name: \"Home\" });\n      } catch (error) {\n        errorMsg.value = `Error: ${error.message}`;\n        setTimeout(() => {\n          errorMsg.value = false;\n        }, 5000);\n      }\n    };\n    // Edit mode\n    const edit = ref(null);\n    const editMode = () => {\n      edit.value = !edit.value;\n    };\n    // Add exercise\n\n    // Delete exercise\n\n    // Update Workout\n\n    return { data, dataLoaded, statusMessage, errorMessage, edit, user };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}