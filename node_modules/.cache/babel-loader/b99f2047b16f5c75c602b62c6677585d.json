{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants';\nimport { stripTrailingSlash, isBrowser } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.restUrl = `${_supabaseUrl}/rest/v1`;\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws');\n    this.authUrl = `${_supabaseUrl}/auth/v1`;\n    this.storageUrl = `${_supabaseUrl}/storage/v1`;\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.');\n\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n    }\n\n    this.schema = settings.schema;\n    this.multiTab = settings.multiTab;\n    this.fetch = settings.fetch;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), options === null || options === void 0 ? void 0 : options.headers);\n    this.shouldThrowOnError = settings.shouldThrowOnError || false;\n    this.auth = this._initSupabaseAuthClient(settings);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n\n    this._listenForAuthEvents();\n\n    this._listenForMultiTabEvents(); // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this._getAuthHeaders(),\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n\n\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch);\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n\n\n  from(table) {\n    const url = `${this.restUrl}/${table}`;\n    return new SupabaseQueryBuilder(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n\n\n  rpc(fn, params, {\n    head = false,\n    count = null\n  } = {}) {\n    const rest = this._initPostgRESTClient();\n\n    return rest.rpc(fn, params, {\n      head,\n      count\n    });\n  }\n  /**\n   * Closes and removes all subscriptions and returns a list of removed\n   * subscriptions and their errors.\n   */\n\n\n  removeAllSubscriptions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allSubs = this.getSubscriptions().slice();\n      const allSubPromises = allSubs.map(sub => this.removeSubscription(sub));\n      const allRemovedSubs = yield Promise.all(allSubPromises);\n      return allRemovedSubs.map(({\n        error\n      }, i) => {\n        return {\n          data: {\n            subscription: allSubs[i]\n          },\n          error\n        };\n      });\n    });\n  }\n  /**\n   * Closes and removes a subscription and returns the number of open subscriptions.\n   *\n   * @param subscription The subscription you want to close and remove.\n   */\n\n\n  removeSubscription(subscription) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        error\n      } = yield this._closeSubscription(subscription);\n      const allSubs = this.getSubscriptions();\n      const openSubCount = allSubs.filter(chan => chan.isJoined()).length;\n      if (allSubs.length === 0) yield this.realtime.disconnect();\n      return {\n        data: {\n          openSubscriptions: openSubCount\n        },\n        error\n      };\n    });\n  }\n\n  _closeSubscription(subscription) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let error = null;\n\n      if (!subscription.isClosed()) {\n        const {\n          error: unsubError\n        } = yield this._unsubscribeSubscription(subscription);\n        error = unsubError;\n      }\n\n      this.realtime.remove(subscription);\n      return {\n        error\n      };\n    });\n  }\n\n  _unsubscribeSubscription(subscription) {\n    return new Promise(resolve => {\n      subscription.unsubscribe().receive('ok', () => resolve({\n        error: null\n      })).receive('error', error => resolve({\n        error\n      })).receive('timeout', () => resolve({\n        error: new Error('timed out')\n      }));\n    });\n  }\n  /**\n   * Returns an array of all your subscriptions.\n   */\n\n\n  getSubscriptions() {\n    return this.realtime.channels;\n  }\n\n  _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    localStorage,\n    headers,\n    fetch,\n    cookieOptions,\n    multiTab\n  }) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, headers), authHeaders),\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      fetch,\n      cookieOptions,\n      multiTab\n    });\n  }\n\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), {\n        apikey: this.supabaseKey\n      })\n    }));\n  }\n\n  _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      fetch: this.fetch,\n      throwOnError: this.shouldThrowOnError\n    });\n  }\n\n  _getAuthHeaders() {\n    var _a, _b;\n\n    const headers = Object.assign({}, this.headers);\n    const authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n    headers['apikey'] = this.supabaseKey;\n    headers['Authorization'] = headers['Authorization'] || `Bearer ${authBearer}`;\n    return headers;\n  }\n\n  _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n      return null;\n    }\n\n    try {\n      return window === null || window === void 0 ? void 0 : window.addEventListener('storage', e => {\n        var _a, _b, _c;\n\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue));\n          const accessToken = (_b = (_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n          const previousAccessToken = (_c = this.auth.session()) === null || _c === void 0 ? void 0 : _c.access_token;\n\n          if (!accessToken) {\n            this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE');\n          } else if (!previousAccessToken && accessToken) {\n            this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE');\n          } else if (previousAccessToken !== accessToken) {\n            this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE');\n          }\n        }\n      });\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error);\n      return null;\n    }\n  }\n\n  _listenForAuthEvents() {\n    let {\n      data\n    } = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n    });\n    return data;\n  }\n\n  _handleTokenChanged(event, token, source) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token); // Ideally we should call this.auth.recoverSession() - need to make public\n      // to trigger a \"SIGNED_IN\" event on this client.\n\n      if (source == 'STORAGE') this.auth.setAuth(token);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","STORAGE_KEY","stripTrailingSlash","isBrowser","SupabaseAuthClient","SupabaseQueryBuilder","SupabaseStorageClient","FunctionsClient","PostgrestClient","RealtimeClient","DEFAULT_OPTIONS","schema","autoRefreshToken","persistSession","detectSessionInUrl","multiTab","headers","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","settings","restUrl","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","fetch","Object","shouldThrowOnError","auth","_initSupabaseAuthClient","realtime","_initRealtimeClient","_listenForAuthEvents","_listenForMultiTabEvents","functions","_getAuthHeaders","customFetch","storage","from","table","url","rpc","fn","params","head","count","rest","_initPostgRESTClient","removeAllSubscriptions","allSubs","getSubscriptions","slice","allSubPromises","map","sub","removeSubscription","allRemovedSubs","Promise","all","error","i","data","subscription","_closeSubscription","openSubCount","filter","chan","isJoined","length","disconnect","openSubscriptions","isClosed","unsubError","_unsubscribeSubscription","remove","resolve","unsubscribe","receive","channels","localStorage","cookieOptions","authHeaders","Authorization","apikey","throwOnError","authBearer","session","_a","access_token","_b","window","addEventListener","e","key","newSession","JSON","parse","String","newValue","accessToken","currentSession","undefined","previousAccessToken","_c","_handleTokenChanged","console","onAuthStateChange","event","token","source","changedAccessToken","setAuth","signOut"],"sourceRoot":"","sources":["../../src/SupabaseClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}