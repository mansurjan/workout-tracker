{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder extends PostgrestBuilder {\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch,\n    shouldThrowOnError\n  } = {}) {\n    super({\n      fetch,\n      shouldThrowOnError\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  select(columns = '*', {\n    head = false,\n    count = null\n  } = {}) {\n    this.method = 'GET'; // Remove whitespaces except when quoted\n\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`;\n    }\n\n    if (head) {\n      this.method = 'HEAD';\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n\n  insert(values, {\n    upsert = false,\n    onConflict,\n    returning = 'representation',\n    count = null\n  } = {}) {\n    this.method = 'POST';\n    const prefersHeaders = [`return=${returning}`];\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates');\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n\n\n  upsert(values, {\n    onConflict,\n    returning = 'representation',\n    count = null,\n    ignoreDuplicates = false\n  } = {}) {\n    this.method = 'POST';\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`, `return=${returning}`];\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  update(values, {\n    returning = 'representation',\n    count = null\n  } = {}) {\n    this.method = 'PATCH';\n    const prefersHeaders = [`return=${returning}`];\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  delete({\n    returning = 'representation',\n    count = null\n  } = {}) {\n    this.method = 'DELETE';\n    const prefersHeaders = [`return=${returning}`];\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestQueryBuilder","constructor","url","headers","schema","fetch","shouldThrowOnError","URL","Object","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","insert","values","upsert","onConflict","returning","prefersHeaders","push","undefined","body","unshift","Array","isArray","reduce","acc","x","concat","keys","length","uniqueColumns","Set","column","ignoreDuplicates","update","delete"],"sourceRoot":"","sources":["../../../src/lib/PostgrestQueryBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}